<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>esnetk6.com</title>
  
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://esnetk6.com/"/>
  <updated>2018-12-29T15:37:44.168Z</updated>
  <id>https://esnetk6.com/</id>
  
  <author>
    <name>esnetk6</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ブログをS3からGitHub Pagesに移した</title>
    <link href="https://esnetk6.com/2018/12/github-pages-blog/"/>
    <id>https://esnetk6.com/2018/12/github-pages-blog/</id>
    <published>2018-12-29T15:30:00.000Z</published>
    <updated>2018-12-29T15:37:44.168Z</updated>
    
    <content type="html"><![CDATA[<p>Amazon S3を使っていたのですがGitHub Pagesにしました。</p><p>AWSありがとう。<br>諸事情により移行することになりましたが速いし安いし最高でした。</p><h2 id="GitHub-Pagesに独自ドメインを適用する"><a href="#GitHub-Pagesに独自ドメインを適用する" class="headerlink" title="GitHub Pagesに独自ドメインを適用する"></a>GitHub Pagesに独自ドメインを適用する</h2><p><a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="noopener">https://help.github.com/articles/setting-up-an-apex-domain/</a></p><p>Aレコード</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>いつの間にかGitHub Pagesが公式で独自ドメインのHTTPS配信をサポートするようになっていました。リポジトリの設定からEnforce HTTPSにチェックを入れるだけでした。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Amazon S3を使っていたのですがGitHub Pagesにしました。&lt;/p&gt;
&lt;p&gt;AWSありがとう。&lt;br&gt;諸事情により移行することになりましたが速いし安いし最高でした。&lt;/p&gt;
&lt;h2 id=&quot;GitHub-Pagesに独自ドメインを適用する&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="github" scheme="https://esnetk6.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Circle CIでwebサイトを自動デプロイ</title>
    <link href="https://esnetk6.com/2018/04/circle-ci-deployment/"/>
    <id>https://esnetk6.com/2018/04/circle-ci-deployment/</id>
    <published>2018-04-02T11:30:00.000Z</published>
    <updated>2018-12-21T09:22:18.702Z</updated>
    
    <content type="html"><![CDATA[<p>Circle CI 2.0を使って、GitHub or BitbucketからWebサイトを自動デプロイさせます。masterブランチは本番サーバーへ、developブランチはテストサーバーへ分けてデプロイさせるといったことも可能です。</p><p>テストなんてどうでもいいから、とりあえず自動デプロイだけ実現してFTPクライアントでのアップロード作業から逃れたい！と思っていた自分のためのメモです。</p><p>今回紹介する方法ではsshの使えるサーバーが必要です。<br>Circle CIからデータをあげたり削除したりするので、最初は失敗してもいい環境で試すのをおすすめします。自己責任でおねがいします。</p><h2 id="Circle-CIの設定ファイルを作成してリポジトリにPush"><a href="#Circle-CIの設定ファイルを作成してリポジトリにPush" class="headerlink" title="Circle CIの設定ファイルを作成してリポジトリにPush"></a>Circle CIの設定ファイルを作成してリポジトリにPush</h2><p>リポジトリ直下に <code>.circleci/config.yml</code> を作ります。ファイルの中身は以下をコピペ。<br><strong>用意できたらGitHub or BitbucketのリポジトリにPushしておきます。</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Environment variables</span></span><br><span class="line"><span class="comment"># - HOST_NAME</span></span><br><span class="line"><span class="comment"># - USER_NAME</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol">version:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">jobs:</span></span><br><span class="line">  <span class="symbol">build:</span></span><br><span class="line">    <span class="symbol">docker:</span></span><br><span class="line">      - <span class="symbol">image:</span> circleci/<span class="symbol">php:</span><span class="number">7.1</span>-browsers</span><br><span class="line"> </span><br><span class="line">    <span class="symbol">steps:</span></span><br><span class="line">      - checkout</span><br><span class="line"> </span><br><span class="line">      - <span class="symbol">add_ssh_keys:</span></span><br><span class="line">          <span class="symbol">fingerprints:</span></span><br><span class="line">            - <span class="string">"xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx"</span></span><br><span class="line"> </span><br><span class="line">      - <span class="symbol">run:</span></span><br><span class="line">          <span class="symbol">name:</span> Start ssh-keyscan</span><br><span class="line">          <span class="symbol">command:</span> |</span><br><span class="line">            ssh-keyscan <span class="variable">$&#123;</span>HOST_NAME&#125; &gt;&gt; ~<span class="regexp">/.ssh/known</span>_hosts</span><br><span class="line"> </span><br><span class="line">      - <span class="symbol">deploy:</span></span><br><span class="line">          <span class="symbol">name:</span> Start master deploy</span><br><span class="line">          <span class="symbol">command:</span> |</span><br><span class="line">            if [ <span class="string">"$&#123;CIRCLE_BRANCH&#125;"</span> == <span class="string">"master"</span> ]; <span class="keyword">then</span></span><br><span class="line">                rsync -av --delete --exclude=<span class="string">'.git'</span> --exclude=<span class="string">'.circleci'</span> ./ <span class="variable">$&#123;</span>USER_NAME&#125;@<span class="variable">$&#123;</span>HOST_NAME&#125;<span class="symbol">:/var/www/html/</span></span><br><span class="line">            fi</span><br></pre></td></tr></table></figure><h2 id="Circle-CIにログイン"><a href="#Circle-CIにログイン" class="headerlink" title="Circle CIにログイン"></a>Circle CIにログイン</h2><p>Circle CIにGitHub or Bitbucketのアカウントでログインします。<br><a href="http://circleci.com/" target="_blank" rel="noopener">http://circleci.com/</a></p><h2 id="リポジトリを選択する"><a href="#リポジトリを選択する" class="headerlink" title="リポジトリを選択する"></a>リポジトリを選択する</h2><p>左のProjectから “Add Project” をクリックするとリポジトリ一覧が表示されます。<br>さきほどconfig.ymlをPushしたリポジトリの “Setup Project” をクリック。</p><p><img src="/2018/04/circle-ci-deployment/screenshot1.png" alt=""></p><p><img src="/2018/04/circle-ci-deployment/screenshot2.png" alt=""></p><h2 id="設定画面"><a href="#設定画面" class="headerlink" title="設定画面"></a>設定画面</h2><p>プロジェクトの初期設定画面が表示されますが、push済みのconfig.ymlで指定してあるので、ここでは何も押さずにスクロールしていって “Start building” をクリック。</p><p><img src="/2018/04/circle-ci-deployment/screenshot3.png" alt=""></p><p><img src="/2018/04/circle-ci-deployment/screenshot4.png" alt=""></p><h2 id="1回目のビルド"><a href="#1回目のビルド" class="headerlink" title="1回目のビルド"></a>1回目のビルド</h2><p>ビルドが始まりますが1回目は失敗します。Failedとなって以下のように赤くなるはずです。</p><p>環境変数等の設定画面に移動するため歯車アイコンをクリック。</p><p><img src="/2018/04/circle-ci-deployment/screenshot5.png" alt=""></p><h2 id="設定画面-1"><a href="#設定画面-1" class="headerlink" title="設定画面"></a>設定画面</h2><p><img src="/2018/04/circle-ci-deployment/screenshot6.png" alt=""></p><h2 id="秘密鍵の登録"><a href="#秘密鍵の登録" class="headerlink" title="秘密鍵の登録"></a>秘密鍵の登録</h2><p>Circle CIに秘密鍵を登録します。<br>メニューからPermissions &gt; SSH Permissions &gt; Add SSH keyをクリック。</p><p><img src="/2018/04/circle-ci-deployment/screenshot7.png" alt=""></p><p>Hostname（例：example.com）と秘密鍵の中身を登録。最初と最後の行も含めてください。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA <span class="keyword">PRIVATE</span> <span class="keyword">KEY</span>-----</span><br><span class="line">（略）</span><br><span class="line">-----<span class="keyword">END</span> RSA <span class="keyword">PRIVATE</span> <span class="keyword">KEY</span>-----</span><br></pre></td></tr></table></figure><p><img src="/2018/04/circle-ci-deployment/screenshot8.png" alt=""></p><p>登録すると以下のようにFingerprintがセットされます。この値は後で使います。</p><p><img src="/2018/04/circle-ci-deployment/screenshot9.png" alt=""></p><h2 id="環境変数の設定"><a href="#環境変数の設定" class="headerlink" title="環境変数の設定"></a>環境変数の設定</h2><p>今回用意したconfig.ymlでは2つの環境変数を使っています。<br>sshで接続する時のホスト名 <code>HOST_NAME</code> と、ユーザー名 <code>USER_NAME</code> です。<br>例として <a href="mailto:`ssh_user@example.com" target="_blank" rel="noopener">`ssh_user@example.com</a>` で接続するものとして進めます。</p><p>環境変数はメニューからBuild Settings &gt; Environment Variables &gt; Add variableで登録。</p><p><img src="/2018/04/circle-ci-deployment/screenshot10.png" alt=""></p><p>1つめはHOST_NAME。valueにホスト名を入力（例：example.com）。</p><p><img src="/2018/04/circle-ci-deployment/screenshot11.png" alt=""></p><p>2つめはUSER_NAME。valueにユーザー名を入力（例：ssh_user）。</p><p><img src="/2018/04/circle-ci-deployment/screenshot12.png" alt=""></p><p>登録すると以下のようになっているはずです。<br>Circle CI画面での設定はここまで。</p><p><img src="/2018/04/circle-ci-deployment/screenshot13.png" alt=""></p><h2 id="config-ymlの編集"><a href="#config-ymlの編集" class="headerlink" title="config.ymlの編集"></a>config.ymlの編集</h2><p>エディターで <code>.circleci/config.yml</code> を開いて編集します。</p><h3 id="Fingerprintの差し替え"><a href="#Fingerprintの差し替え" class="headerlink" title="Fingerprintの差し替え"></a>Fingerprintの差し替え</h3><p>先ほど秘密鍵を登録したあとに表示されたFingerprintをコピーして、16行目の <code>&quot;xx:xx:xx...&quot;</code> となっている箇所に貼り付けます。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">add_ssh_keys</span>:</span><br><span class="line">    <span class="selector-tag">fingerprints</span>:</span><br><span class="line">      <span class="selector-tag">-</span> "<span class="selector-tag">a2</span><span class="selector-pseudo">:6d</span><span class="selector-pseudo">:ec</span><span class="selector-pseudo">:7e</span><span class="selector-pseudo">:53</span><span class="selector-pseudo">:a5</span><span class="selector-pseudo">:4b</span><span class="selector-pseudo">:d7</span><span class="selector-pseudo">:72</span><span class="selector-pseudo">:78</span><span class="selector-pseudo">:0e</span><span class="selector-pseudo">:d1</span><span class="selector-pseudo">:d4</span><span class="selector-pseudo">:ee</span><span class="selector-pseudo">:b2</span><span class="selector-pseudo">:02"</span></span><br></pre></td></tr></table></figure><h3 id="デプロイ先ディレクトリの変更"><a href="#デプロイ先ディレクトリの変更" class="headerlink" title="デプロイ先ディレクトリの変更"></a>デプロイ先ディレクトリの変更</h3><p>27行目のrsyncコマンドで、リポジトリの <code>./</code> ディレクトリ以下をアップロードさせます。<code>/</code> から始めると余計なものがアップされてしまうので注意。</p><p>デプロイ先が <code>/var/www/html/</code> となっているのでディレクトリを変更してください。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --delete --exclude=<span class="string">'.git'</span> --exclude=<span class="string">'.circleci'</span> ./ <span class="variable">$&#123;</span>USER_NAME&#125;@<span class="variable">$&#123;</span>HOST_NAME&#125;<span class="symbol">:/var/www/html/</span></span><br></pre></td></tr></table></figure><p><code>--delete</code> オプションを指定しているので、リポジトリのファイルを削除するとサーバー側の同じファイルが自動的に削除されてしまうのでご注意ください。<br><code>--exclude</code> オプションで、config.ymlと.gitフォルダ内がアップされないようにしています。</p><h3 id="ポート番号の指定（サーバーによって必要）"><a href="#ポート番号の指定（サーバーによって必要）" class="headerlink" title="ポート番号の指定（サーバーによって必要）"></a>ポート番号の指定（サーバーによって必要）</h3><p>たとえばエックスサーバーのようにssh接続にポート番号（10022）が指定されている場合は、config.ymlでもポート番号を指定しておきます。</p><h3 id="21行目"><a href="#21行目" class="headerlink" title="21行目"></a>21行目</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan $&#123;HOST_NAME&#125; <span class="meta">&gt;&gt; </span>~<span class="regexp">/.ssh/known</span>_hosts</span><br></pre></td></tr></table></figure><p>から</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan -p <span class="number">10022</span> $&#123;HOST_NAME&#125; <span class="meta">&gt;&gt; </span>~<span class="regexp">/.ssh/known</span>_hosts</span><br></pre></td></tr></table></figure><h3 id="27行目"><a href="#27行目" class="headerlink" title="27行目"></a>27行目</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --delete --exclude=<span class="string">'.git'</span> --exclude=<span class="string">'.circleci'</span> ./ <span class="variable">$&#123;</span>USER_NAME&#125;@<span class="variable">$&#123;</span>HOST_NAME&#125;<span class="symbol">:/var/www/html/</span></span><br></pre></td></tr></table></figure><p>から</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --delete --rsh=<span class="string">"ssh -p 10022"</span> --exclude=<span class="string">'.git'</span> --exclude=<span class="string">'.circleci'</span> ./ <span class="variable">$&#123;</span>USER_NAME&#125;@<span class="variable">$&#123;</span>HOST_NAME&#125;<span class="symbol">:/var/www/html/</span></span><br></pre></td></tr></table></figure><h2 id="config-ymlをpush"><a href="#config-ymlをpush" class="headerlink" title="config.ymlをpush"></a>config.ymlをpush</h2><ul><li>Fingerprintの差し替え</li><li>デプロイ先ディレクトリの変更</li><li>ポート番号の指定</li></ul><p>ができたら、config.ymlをpushします。<br>pushやプルリクのマージによってソースに変更があるとCircle CIが動くようになっているので、左上のBUILDSへ行くと新しいビルドがスタートしているはずです。</p><p>1回目はFailedでしたが、Fixed（緑色）になったらビルド成功です。</p><p><img src="/2018/04/circle-ci-deployment/screenshot14.png" alt=""></p><p>正しくファイルがアップされたかどうか、ブラウザやFTPクライアント等で確認してください。<br>いらないファイルがアップされていたりしたら、rsyncの <code>--exclude</code> で除外するファイルやフォルダを指定します。</p><p>config.yml以外のソースの変更をしてpushしてみたときに再度デプロイされるかどうかも確認します。正しく動いていたらおしまいです。</p><h2 id="特定のブランチ以外はCircle-CIを動かさない"><a href="#特定のブランチ以外はCircle-CIを動かさない" class="headerlink" title="特定のブランチ以外はCircle CIを動かさない"></a>特定のブランチ以外はCircle CIを動かさない</h2><p>書いておくと余計なビルドがなくなります。</p><p><a href="https://circleci.com/docs/2.0/configuration-reference/#branches" target="_blank" rel="noopener">https://circleci.com/docs/2.0/configuration-reference/#branches</a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">jobs:</span></span><br><span class="line"><span class="symbol">  build:</span></span><br><span class="line"><span class="symbol">    branches:</span></span><br><span class="line"><span class="symbol">      only:</span></span><br><span class="line">        - master</span><br></pre></td></tr></table></figure><h2 id="ブランチごとにデプロイ先を変える"><a href="#ブランチごとにデプロイ先を変える" class="headerlink" title="ブランチごとにデプロイ先を変える"></a>ブランチごとにデプロイ先を変える</h2><p>masterは本番サーバーへ、developはテストサーバーへデプロイさせたい、みたいなとき。</p><ul><li>秘密鍵を追加した場合、fingerprintも増えます（行を追加すればOK）。</li><li>デプロイ先が増えるので、環境変数も追加します。</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Environment variables</span></span><br><span class="line"><span class="comment"># - HOST_NAME</span></span><br><span class="line"><span class="comment"># - USER_NAME</span></span><br><span class="line"><span class="comment"># - HOST_NAME_DEV</span></span><br><span class="line"><span class="comment"># - USER_NAME_DEV</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">version:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">jobs:</span></span><br><span class="line">  <span class="symbol">build:</span></span><br><span class="line">    <span class="symbol">docker:</span></span><br><span class="line">      - <span class="symbol">image:</span> circleci/<span class="symbol">php:</span><span class="number">7.1</span>-browsers</span><br><span class="line"> </span><br><span class="line">    <span class="symbol">branches:</span></span><br><span class="line">      <span class="symbol">only:</span></span><br><span class="line">        - master</span><br><span class="line">        - develop</span><br><span class="line"> </span><br><span class="line">    <span class="symbol">steps:</span></span><br><span class="line">      - checkout</span><br><span class="line"> </span><br><span class="line">      - <span class="symbol">add_ssh_keys:</span></span><br><span class="line">          <span class="symbol">fingerprints:</span></span><br><span class="line">            - <span class="string">"xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx"</span></span><br><span class="line">            - <span class="string">"yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy"</span> <span class="comment">#追加</span></span><br><span class="line"> </span><br><span class="line">      - <span class="symbol">run:</span></span><br><span class="line">          <span class="symbol">name:</span> Start ssh-keyscan</span><br><span class="line">          <span class="symbol">command:</span> |</span><br><span class="line">            ssh-keyscan <span class="variable">$&#123;</span>HOST_NAME&#125; &gt;&gt; ~<span class="regexp">/.ssh/known</span>_hosts</span><br><span class="line">            ssh-keyscan <span class="variable">$&#123;</span>HOST_NAME_DEV&#125; &gt;&gt; ~<span class="regexp">/.ssh/known</span>_hosts <span class="comment">#追加</span></span><br><span class="line"> </span><br><span class="line">      - <span class="symbol">deploy:</span></span><br><span class="line">          <span class="symbol">name:</span> Start master deploy</span><br><span class="line">          <span class="symbol">command:</span> |</span><br><span class="line">            if [ <span class="string">"$&#123;CIRCLE_BRANCH&#125;"</span> == <span class="string">"master"</span> ]; <span class="keyword">then</span></span><br><span class="line">                rsync -av --delete --exclude=<span class="string">'.git'</span> --exclude=<span class="string">'.circleci'</span> ./ <span class="variable">$&#123;</span>USER_NAME&#125;@<span class="variable">$&#123;</span>HOST_NAME&#125;<span class="symbol">:/var/www/html/</span></span><br><span class="line">            fi</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 追加</span></span><br><span class="line">      - <span class="symbol">deploy:</span></span><br><span class="line">          <span class="symbol">name:</span> Start develop deploy</span><br><span class="line">          <span class="symbol">command:</span> |</span><br><span class="line">            if [ <span class="string">"$&#123;CIRCLE_BRANCH&#125;"</span> == <span class="string">"develop"</span> ]; <span class="keyword">then</span></span><br><span class="line">                rsync -av --delete --exclude=<span class="string">'.git'</span> --exclude=<span class="string">'.circleci'</span> ./ <span class="variable">$&#123;</span>USER_NAME_DEV&#125;@<span class="variable">$&#123;</span>HOST_NAME_DEV&#125;<span class="symbol">:/var/www/html/</span></span><br><span class="line">            fi</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>“Are you sure you want to continue connecting (yes/no)?” をきかれてビルドがストップしないようにするためにどうすればいいか調べたところ、以下の記事が参考になりました。</p><ul><li><a href="https://qiita.com/pinkumohikan/items/b6fa4233068e7e98e22d" target="_blank" rel="noopener">初回SSH接続時の対話的Fingerprint確認フローをssh-keyscanでスキップする - Qiita</a></li></ul>]]></content>
    
    <summary type="html">
    
      Circle CI 2.0を使って、GitHub or BitbucketからWebサイトを自動デプロイさせます。masterブランチは本番サーバーへ、developブランチはテストサーバーへ分けてデプロイさせるといったことも可能です。
    
    </summary>
    
    
      <category term="bitbucket" scheme="https://esnetk6.com/tags/bitbucket/"/>
    
      <category term="github" scheme="https://esnetk6.com/tags/github/"/>
    
      <category term="circle-ci" scheme="https://esnetk6.com/tags/circle-ci/"/>
    
  </entry>
  
  <entry>
    <title>CloudFront + ACMでブログをHTTPS化した</title>
    <link href="https://esnetk6.com/2018/02/acm-s3-https/"/>
    <id>https://esnetk6.com/2018/02/acm-s3-https/</id>
    <published>2018-02-14T15:00:00.000Z</published>
    <updated>2018-12-21T09:22:18.695Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo + S3で動いているブログをHTTPS化しました。</p><p>ACMを使うにあたって申請ドメインでメールを受信できるようにしなければならないと聞いて面倒に感じていたんですが、SESでメールも受信できて無事完了しました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>これらの記事のおかげで設定できました。<br>本当にありがとうございます。</p><ul><li><a href="https://qiita.com/toshihirock/items/914f408cd565b66fe9f9" target="_blank" rel="noopener">S3+CloudFront+ACM(AWS Certificate Manager)でHTTPS静的サイトを作ってみた - Qiita</a></li><li><a href="https://qiita.com/toshihirock/items/cf4e6d8afa08beaa728c" target="_blank" rel="noopener">AWS Certificate Manager (ACM)で申請前に事前に確認しておくべき大切なこと - Qiita</a></li><li><a href="https://dev.classmethod.jp/cloud/aws/cloudfront-s3-origin-access-identity/" target="_blank" rel="noopener">[CloudFront + S3]特定バケットに特定ディストリビューションのみからアクセスできるよう設定する ｜ Developers.IO</a></li><li><a href="https://dev.classmethod.jp/cloud/aws/acm-cloudfront-ssl/" target="_blank" rel="noopener">[ACM] AWS Certificate Manager 無料のサーバ証明書でCloudFrontをHTTPS化してみた ｜ Developers.IO</a></li><li><a href="https://blog.majimena.co.jp/tech/2016/03/31/aws-ssl.html" target="_blank" rel="noopener">Amazon S3でSSL対応の静的ウェブサイトを公開する | マジメナラボ - majimena Inc.</a></li><li><a href="http://blog.serverworks.co.jp/tech/2016/06/30/acm-auth-method/" target="_blank" rel="noopener">【そんなときどうする？】メールサーバはないけれどACMを使いたい！ &#8211; サーバーワークスエンジニアブログ</a></li><li><a href="https://thetimegraphy.com/aws-amazon-certificate-manager-tokyo-region-does-not-support-cloudfront/" target="_blank" rel="noopener">Amazon Certificate ManagerのTokyo RegionでSSL取得してもCloudFrontでは表示されない | Timegraphy</a></li></ul>]]></content>
    
    <summary type="html">
    
      Hexo + S3で動いているブログをHTTPS化しました。
    
    </summary>
    
    
      <category term="aws" scheme="https://esnetk6.com/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>BitbucketからFTPサーバーにデプロイ</title>
    <link href="https://esnetk6.com/2017/10/bitbucket-pipelines-ftp-deployment/"/>
    <id>https://esnetk6.com/2017/10/bitbucket-pipelines-ftp-deployment/</id>
    <published>2017-10-10T15:00:00.000Z</published>
    <updated>2018-12-21T09:22:18.695Z</updated>
    
    <content type="html"><![CDATA[<p>BitbucketからFTPサーバーにデプロイする方法を探すと「<a href="https://github.com/alixandru/bitbucket-sync/" target="_blank" rel="noopener">Bitbucket Sync</a>」を使っている情報が多い気がしますが、現在はこのスクリプトじゃなく<a href="https://ja.atlassian.com/software/bitbucket/features/pipelines" target="_blank" rel="noopener">Pipelines</a>を使うようにとの案内があるので、その手順をメモ。</p><h2 id="使用したサーバー"><a href="#使用したサーバー" class="headerlink" title="使用したサーバー"></a>使用したサーバー</h2><p>お名前.com レンタルサーバー（SD-11プラン）で確認済。<br>さくらのレンタルサーバー（スタンダードプラン）でも実行しましたが、この方法ではデプロイできませんでした（2017年10月現在）。</p><h3 id="注意：デプロイ先のディレクトリを空の状態にしておくこと"><a href="#注意：デプロイ先のディレクトリを空の状態にしておくこと" class="headerlink" title="注意：デプロイ先のディレクトリを空の状態にしておくこと"></a>注意：デプロイ先のディレクトリを空の状態にしておくこと</h3><p>デプロイ対象のディレクトリの中が空になっていないと失敗します。ファイルを削除しておいてください。</p><h2 id="リポジトリの用意"><a href="#リポジトリの用意" class="headerlink" title="リポジトリの用意"></a>リポジトリの用意</h2><p>今回は新規のリポジトリを作成しました。</p><h2 id="Pipelinesを有効にする"><a href="#Pipelinesを有効にする" class="headerlink" title="Pipelinesを有効にする"></a>Pipelinesを有効にする</h2><p>リポジトリの「設定」→「PIPELINES」→「Settings」→「Enable Pipelines」 で有効にします。<br>続いて「Configure bitbucket-pipelines.yml」をクリックします。</p><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot1.png" alt=""></p><h2 id="bitbucket-pipelines-ymlの作成"><a href="#bitbucket-pipelines-ymlの作成" class="headerlink" title="bitbucket-pipelines.ymlの作成"></a>bitbucket-pipelines.ymlの作成</h2><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot2.png" alt=""></p><p>Pipelinesの設定画面に飛びます。<br>「Choose a language template」のいずれかの言語をクリックするとymlの編集画面が表示されるので<a href="https://github.com/alixandru/bitbucket-sync/" target="_blank" rel="noopener">Bitbucket Sync</a>の概要にあるコードを貼り付けるのですが、現時点ではインデントに間違いがあるらしくエラーが出ます。以下のコードに直してください。</p><p>ついでに11行目の <code>ftp://ftp.change-this.ro/</code> を自分のデプロイ先に置き換えます。<br>例： <code>ftp://ftp**.gmoserver.jp/deploy-test/</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">image: samueldebruyn/debian-git</span><br><span class="line"> </span><br><span class="line">pipeline<span class="variable">s:</span></span><br><span class="line">  defaul<span class="variable">t:</span></span><br><span class="line">    - step:</span><br><span class="line">        <span class="keyword">scrip</span><span class="variable">t:</span></span><br><span class="line">          - <span class="keyword">echo</span> <span class="string">"Pipeline Init"</span></span><br><span class="line">          - apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">          - apt-<span class="built_in">get</span> -qq install git-ftp</span><br><span class="line">          - <span class="keyword">echo</span> <span class="string">"Initiating Push"</span></span><br><span class="line">          - git ftp init --user $FTP_USERNAME --passwd $FTP_PASSWORD ftp://ftp.<span class="keyword">change</span>-this.ro/</span><br><span class="line">          - <span class="keyword">echo</span> <span class="string">"Done Pushing"</span></span><br></pre></td></tr></table></figure><p>編集が終わったら「Commit file」をクリックします。Pipelinesが動きますが、1回目はコケます。</p><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot3.png" alt=""></p><h2 id="環境変数の設定"><a href="#環境変数の設定" class="headerlink" title="環境変数の設定"></a>環境変数の設定</h2><p>リポジトリの「設定」→「PIPELINES」→「Environment variables」画面に移ります。<br><code>FTP_USER</code> と <code>FTP_PASSWORD</code> という変数を用意して、アカウント、パスワードを入力します。</p><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot4.png" alt=""></p><h2 id="再実行"><a href="#再実行" class="headerlink" title="再実行"></a>再実行</h2><p>リポジトリの「Pipelines」メニューから、行なわれた処理を選択すると詳細画面に移ります。<br>タイトル下のFailedとなっているエリアの右側に「Rerun」という項目があるのでクリック。</p><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot5.png" alt=""></p><h2 id="デプロイ成功"><a href="#デプロイ成功" class="headerlink" title="デプロイ成功"></a>デプロイ成功</h2><p>FailedがSuccessfulになればデプロイ成功。<br>成功しなかった場合、対象ディレクトリが空になっていなかったか、そもそもお使いのサーバーがこの方法に対応していない可能性があります。</p><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot6.png" alt=""></p><p>デプロイ先をFTPクライアントで見てみると以下のとおり。今回は新規のリポジトリなのでファイルがこれしかありません。</p><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot7.png" alt=""></p><h2 id="bitbucket-pipelines-ymlの編集"><a href="#bitbucket-pipelines-ymlの編集" class="headerlink" title="bitbucket-pipelines.ymlの編集"></a>bitbucket-pipelines.ymlの編集</h2><p>初回のデプロイが成功したら、再度bitbucket-pipelines.ymlを編集し、11行目 <code>git ftp init</code> を <code>git ftp push</code> に書き換えます。</p><p>下の例では「ソース」からオンライン上で編集しています。</p><p><img src="/2017/10/bitbucket-pipelines-ftp-deployment/screenshot8.png" alt=""></p><p>編集後、再度Pipelinesの処理が行われます。<br>以降、ソースが更新されるたびに自動デプロイが行われます。</p>]]></content>
    
    <summary type="html">
    
      BitbucketからFTPサーバーにデプロイする方法を探すと「Bitbucket Sync」を使っている情報が多い気がしますが、現在はこのスクリプトじゃなく「Pipelines」を使うようにとの案内があるので、その手順をメモ。
    
    </summary>
    
    
      <category term="bitbucket" scheme="https://esnetk6.com/tags/bitbucket/"/>
    
  </entry>
  
  <entry>
    <title>WP-CLIをマルチサイト上の別ブログで使う</title>
    <link href="https://esnetk6.com/2017/08/wp-cli-run-command-on-multisite/"/>
    <id>https://esnetk6.com/2017/08/wp-cli-run-command-on-multisite/</id>
    <published>2017-08-01T21:40:00.000Z</published>
    <updated>2018-12-21T09:22:18.711Z</updated>
    
    <content type="html"><![CDATA[<p>マルチサイト上のメインサイトとは別のブログでWP-CLIコマンドを使う方法。<br>マルチサイトを作成するコマンドではありません。</p><h2 id="マルチサイトの例"><a href="#マルチサイトの例" class="headerlink" title="マルチサイトの例"></a>マルチサイトの例</h2><p>以下のようにマルチサイト（サブディレクトリ型）を作っていたとして、<br>普通にWP-CLIコマンドを使ってもメインのサイト（1つ目）の方でしか動作しません。</p><ul><li><a href="http://wocker.dev/" target="_blank" rel="noopener">http://wocker.dev/</a></li><li><a href="http://wocker.dev/test/" target="_blank" rel="noopener">http://wocker.dev/test/</a>　←こっちで使いたい</li></ul><h2 id="“url”-オプションを使う"><a href="#“url”-オプションを使う" class="headerlink" title="“url” オプションを使う"></a>“url” オプションを使う</h2><p><code>--url=&lt;url&gt;</code> で指定のサイト上でコマンドが使えます。これだけです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post create --url=<span class="string">"wocker.dev/test/"</span> --post_title=<span class="string">"test"</span></span><br></pre></td></tr></table></figure><h2 id="URL直接ではなくブログIDの指定でコマンドを叩く"><a href="#URL直接ではなくブログIDの指定でコマンドを叩く" class="headerlink" title="URL直接ではなくブログIDの指定でコマンドを叩く"></a>URL直接ではなくブログIDの指定でコマンドを叩く</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post create --url=$(wp site url 2) --post_title=<span class="string">"test"</span></span><br></pre></td></tr></table></figure><p><code>--url=$(wp site url 2)</code> が何なのかは以下で説明。</p><h2 id="“wp-site”-でブログ情報を取得"><a href="#“wp-site”-でブログ情報を取得" class="headerlink" title="“wp site” でブログ情報を取得"></a>“wp site” でブログ情報を取得</h2><p><code>wp site list</code> で、ネットワーク上のブログ一覧が表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wp site list</span><br><span class="line">blog_idurllast_updatedregistered</span><br><span class="line">1http://wocker.dev/2017-07-04 10:29:082017-05-08 22:01:25</span><br><span class="line">2http://wocker.dev/<span class="built_in">test</span>/2017-07-04 10:36:252017-05-08 22:07:17</span><br></pre></td></tr></table></figure><p><code>wp site url</code> で、ブログIDからURLを取得。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wp site url 2</span><br><span class="line">http://wocker.dev/<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      マルチサイト上のメインサイトとは別のブログでWP-CLIコマンドを使う方法。マルチサイトを作成するコマンドではありません。
    
    </summary>
    
    
      <category term="wordpress" scheme="https://esnetk6.com/tags/wordpress/"/>
    
      <category term="wp-cli" scheme="https://esnetk6.com/tags/wp-cli/"/>
    
  </entry>
  
  <entry>
    <title>WP-CLIで固定ページのテンプレートを指定する</title>
    <link href="https://esnetk6.com/2017/08/wp-cli-set-page-template/"/>
    <id>https://esnetk6.com/2017/08/wp-cli-set-page-template/</id>
    <published>2017-08-01T05:30:00.000Z</published>
    <updated>2018-12-21T09:22:18.711Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/08/wp-cli-set-page-template/screenshot1.png" alt=""></p><p><code>wp post</code> コマンドのオプションで <code>--page_template=&quot;template-sample.php&quot;</code> のようにファイル名を指定します。</p><h2 id="ページの新規作成と同時にテンプレートを指定する場合"><a href="#ページの新規作成と同時にテンプレートを指定する場合" class="headerlink" title="ページの新規作成と同時にテンプレートを指定する場合"></a>ページの新規作成と同時にテンプレートを指定する場合</h2><ul><li><a href="https://developer.wordpress.org/cli/commands/post/create/" target="_blank" rel="noopener">wp post create</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post create --post_type=<span class="string">"page"</span> --page_template=<span class="string">"template-sample.php"</span></span><br></pre></td></tr></table></figure><h2 id="作成済みのページのテンプレートを変更する場合"><a href="#作成済みのページのテンプレートを変更する場合" class="headerlink" title="作成済みのページのテンプレートを変更する場合"></a>作成済みのページのテンプレートを変更する場合</h2><ul><li><a href="https://developer.wordpress.org/cli/commands/post/update/" target="_blank" rel="noopener">wp post update</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post update 123 --page_template=<span class="string">"template-sample.php"</span></span><br></pre></td></tr></table></figure><p>デフォルトテンプレートに戻したいときは “page.php” ではなく “default”。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post update 123 --page_template=<span class="string">"default"</span></span><br></pre></td></tr></table></figure><h2 id="テンプレートが指定されたページ一覧を取得する"><a href="#テンプレートが指定されたページ一覧を取得する" class="headerlink" title="テンプレートが指定されたページ一覧を取得する"></a>テンプレートが指定されたページ一覧を取得する</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post list --post_type=<span class="string">"page"</span> --meta_value=<span class="string">"template-sample.php"</span> --meta_key=<span class="string">"_wp_page_template"</span></span><br></pre></td></tr></table></figure><h3 id="デフォルトテンプレートのページ一覧を取得する"><a href="#デフォルトテンプレートのページ一覧を取得する" class="headerlink" title="デフォルトテンプレートのページ一覧を取得する"></a>デフォルトテンプレートのページ一覧を取得する</h3><p><code>--meta_value=&quot;default&quot;</code> に変更。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post list --post_type=<span class="string">"page"</span> --meta_value=<span class="string">"default"</span> --meta_key=<span class="string">"_wp_page_template"</span></span><br></pre></td></tr></table></figure><p>ただし、WP-CLIで作成したページは <code>--page_template</code> を指定しなかった場合、 <code>meta_key=&quot;_wp_page_template&quot;</code> および <code>meta_value</code> がセットされないようです。</p><p>そのため上記のコマンドでデフォルトテンプレートのページを取得したいとき、あるいはテーマ側で <code>get_posts</code> 等を使ってデフォルトテンプレートのページを表示させたいとき（あるかわからないけど）に、正しく記事を取得できなくなる恐れがあります。</p><p><code>wp post create --page_template=&quot;default&quot;</code> で常に作っておくと安心かもしれません。</p><h2 id="あるテンプレートの記事をすべて別のものに変更する"><a href="#あるテンプレートの記事をすべて別のものに変更する" class="headerlink" title="あるテンプレートの記事をすべて別のものに変更する"></a>あるテンプレートの記事をすべて別のものに変更する</h2><p>たとえば “sample1.php” の記事をすべて “sample2.php” に変更したいというとき。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wp post update $(wp post list --post_type=<span class="string">"page"</span> --format=<span class="string">"ids"</span> --meta_value=<span class="string">"sample1.php"</span> --meta_key=<span class="string">"_wp_page_template"</span>) --page_template=<span class="string">"sample2.php"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      WP-CLIで固定ページのテンプレートを指定するときは、wp post コマンドのオプションで --page_template=&quot;template-sample.php&quot; のようにファイル名を指定します。
    
    </summary>
    
    
      <category term="wordpress" scheme="https://esnetk6.com/tags/wordpress/"/>
    
      <category term="wp-cli" scheme="https://esnetk6.com/tags/wp-cli/"/>
    
  </entry>
  
  <entry>
    <title>WP-CLIで親を指定して固定ページを作る</title>
    <link href="https://esnetk6.com/2017/04/wp-cli-create-sub-page/"/>
    <id>https://esnetk6.com/2017/04/wp-cli-create-sub-page/</id>
    <published>2017-04-29T12:30:00.000Z</published>
    <updated>2018-12-21T09:22:18.709Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/04/wp-cli-create-sub-page/screenshot1.png" alt=""></p><p>WP-CLIから固定ページを生成したいときに、親子関係も一緒に設定するためのメモです。</p><h2 id="WP-CLIで固定ページを作る"><a href="#WP-CLIで固定ページを作る" class="headerlink" title="WP-CLIで固定ページを作る"></a>WP-CLIで固定ページを作る</h2><p>基本形から。<br>記事の投稿はWP-CLIの <a href="http://wp-cli.org/commands/post/create/" target="_blank" rel="noopener">wp post create</a> コマンドで行ないます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wp post create --post_type=page --post_status=publish --post_title=<span class="string">"Company"</span> --post_name=<span class="string">"company"</span></span><br></pre></td></tr></table></figure><p><code>--post_type=page</code> は固定ページとして作るための指定。<br><code>--post_status=publish</code> は公開済みの記事として作るための指定。<br><code>--post_title=&quot;Company&quot;</code> は記事のタイトル。<br><code>--post_name=&quot;company&quot;</code> で記事作成時のパーマリンクの指定もできます。</p><p><img src="/2017/04/wp-cli-create-sub-page/screenshot2.png" alt=""></p><p>当然、このコマンドでは記事の親は指定されていません。<br>※パーマリンク設定によっては <code>--post_name</code> で指定した文字列は表示されませんが、情報としては保存されているはずです。</p><h2 id="親を指定する"><a href="#親を指定する" class="headerlink" title="親を指定する"></a>親を指定する</h2><p>前回のコマンドに加えて <code>--post_parent=ID</code> を指定すると、このIDに該当するページを親として子ページを作成できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wp post create --post_parent=20 --post_type=page ...</span><br></pre></td></tr></table></figure><h3 id="ページのIDをスラッグから取得する"><a href="#ページのIDをスラッグから取得する" class="headerlink" title="ページのIDをスラッグから取得する"></a>ページのIDをスラッグから取得する</h3><p>いちいちIDを調べて指定するのは面倒なので、ページのスラッグからIDを取得します。<br>今回は “company” の下に新たに子ページを作成したいと思います。</p><p>ページのIDを取得するには <a href="http://wp-cli.org/commands/post/list/" target="_blank" rel="noopener">wp post list</a> を使います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wp post list --field=ID --post_type=page --name=<span class="string">"company"</span></span><br></pre></td></tr></table></figure><p><code>--post_name</code> ではなく <code>--name</code> でスラッグを指定しないと正しく取得できませんでした。</p><h2 id="親を指定して固定ページを作成"><a href="#親を指定して固定ページを作成" class="headerlink" title="親を指定して固定ページを作成"></a>親を指定して固定ページを作成</h2><p>オプションの中でさらに <code>wp</code> コマンドを使用する場合は <code>$(wp ~ )</code> とすればいいので、最終的に以下のようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wp post create --post_type=page --post_status=publish --post_title=<span class="string">"Message"</span> --post_name=<span class="string">"message"</span> --post_parent=$(wp post list --post_type=page --field=ID --name=<span class="string">"company"</span>)</span><br></pre></td></tr></table></figure><p><img src="/2017/04/wp-cli-create-sub-page/screenshot3.png" alt=""></p><p>ちゃんと子ページとして作成できました。</p><p>ターミナルへのコピペがうまくいかなくなることが考えられるため、ここまでのコマンドには日本語が入ってませんが、WP-CLIのオプションに日本語が使えないとかいうわけではありません。普通に使えます。</p><p>一つのファイルにまとめてシェルスクリプトを実行させると一発で固定ページを作成できますね。</p><figure class="highlight sh"><figcaption><span>post.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wp post create --post_title=<span class="string">"業務内容"</span> --post_name=<span class="string">"business"</span> --post_type=page --post_status=publish</span><br><span class="line">wp post create --post_title=<span class="string">"お問い合わせ"</span> --post_name=<span class="string">"contact"</span> --post_type=page --post_status=publish</span><br><span class="line">wp post create --post_title=<span class="string">"採用情報"</span> --post_name=<span class="string">"recruit"</span> --post_type=page --post_status=publish</span><br><span class="line">wp post create --post_title=<span class="string">"会社概要"</span> --post_name=<span class="string">"company"</span> --post_type=page --post_status=publish</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 会社概要（company）の下に作成</span></span><br><span class="line">wp post create --post_title=<span class="string">"ご挨拶"</span> --post_name=<span class="string">"message"</span> --post_type=page --post_status=publish --post_parent=$(wp post list --post_type=page --field=ID --name=<span class="string">"company"</span>)</span><br><span class="line">wp post create --post_title=<span class="string">"アクセス"</span> --post_name=<span class="string">"access"</span> --post_type=page --post_status=publish --post_parent=$(wp post list --post_type=page --field=ID --name=<span class="string">"company"</span>)</span><br><span class="line">wp post create --post_title=<span class="string">"沿革"</span> --post_name=<span class="string">"history"</span> --post_type=page --post_status=publish --post_parent=$(wp post list --post_type=page --field=ID --name=<span class="string">"company"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      WP-CLIから固定ページを生成したいときに、親子関係も一緒に設定するためのメモです。
    
    </summary>
    
    
      <category term="wordpress" scheme="https://esnetk6.com/tags/wordpress/"/>
    
      <category term="wp-cli" scheme="https://esnetk6.com/tags/wp-cli/"/>
    
  </entry>
  
  <entry>
    <title>Hexoでブログをスタート</title>
    <link href="https://esnetk6.com/2017/04/start-blog/"/>
    <id>https://esnetk6.com/2017/04/start-blog/</id>
    <published>2017-04-17T13:00:00.000Z</published>
    <updated>2018-12-21T09:22:18.709Z</updated>
    
    <content type="html"><![CDATA[<p>個人的なメモを残すべく、Node.jsで作られている静的サイトジェネレーター<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>でブログを立ち上げました。</p><h2 id="Hexoを選んだ理由"><a href="#Hexoを選んだ理由" class="headerlink" title="Hexoを選んだ理由"></a>Hexoを選んだ理由</h2><p><a href="https://staticsitegenerators.net/" target="_blank" rel="noopener">Static Site Generators</a>によると、2017年04月17日現在のスター数上位3つは</p><ol><li>Jekyll 29064</li><li>Hugo 15723</li><li>Hexo 15286</li></ol><p>Jekyllは以前（ver.2の頃）Windowsでうまく動かせなかったという過去が個人的にあります。<br>また、普段はgulpを使っているのでHexoが一番ラクだろうということでこっち。</p><p>さくっと作れた。便利。</p><h2 id="参考記事"><a href="#参考記事" class="headerlink" title="参考記事"></a>参考記事</h2><ul><li><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="noopener">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！ | 株式会社LIG</a></li></ul>]]></content>
    
    <summary type="html">
    
      個人的なメモを残すべく、Node.jsで作られている静的サイトジェネレーターHexoでブログを立ち上げました。
    
    </summary>
    
    
      <category term="hexo" scheme="https://esnetk6.com/tags/hexo/"/>
    
  </entry>
  
</feed>
